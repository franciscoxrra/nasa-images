import { emptyArray } from "../../util/structure"
import { Reducer } from "react"
import { PrefixAction } from "../util"
import { State } from "../store"
import * as Sentry from "@sentry/react"
import packageJson from "../../../package.json"

interface HistoryEntry {
    expression: string
    date: string
}

interface HistoryState {
    previousSearchExpressions: HistoryEntry[]
}

const initialState: HistoryState = {
    previousSearchExpressions: emptyArray
}

type HistoryAction<Type, Payload = undefined> = PrefixAction<
    "history",
    Type,
    Payload
>

export type AddToHistory = HistoryAction<"history/add", HistoryEntry>

export type ResetHistory = HistoryAction<"history/reset">

export type HistoryReducerAction = AddToHistory | ResetHistory

const searchDuplicateDebounceMs = 50

// Avoid duplicates in redux History, normally generated by StrictMode (shouldn't happen in production)
const isDuplicatedEntry = (state: HistoryState, action: AddToHistory) => {
    if (state.previousSearchExpressions.length > 0) {
        const lastSearchExpressionData = state.previousSearchExpressions[0]
        if (action.payload.expression === lastSearchExpressionData.expression) {
            const existingDate = new Date(lastSearchExpressionData.date)
            const newDate = new Date(action.payload.date)
            if (
                newDate.getTime() - existingDate.getTime() <
                searchDuplicateDebounceMs
            ) {
                Sentry.withScope((scope) => {
                    scope.setExtras({
                        version: packageJson.version,
                        pathname: `${document.location.pathname}`,
                        existingExpression: `${lastSearchExpressionData.expression}`,
                        existingDate: `${existingDate.toISOString()}`,
                        newExpression: `${action.payload.expression}`,
                        newDate: `${newDate.toISOString()}`,
                        duplicateMs: `${searchDuplicateDebounceMs}`
                    })
                    /*if (profile) {
                        scope.setUser(profile)
                    }*/
                    const err = new Error(`CAUGHT HISTORY ENTRY DUPLICATION`)
                    Sentry.captureException(err)
                })
                return true
            }
        }
    }
    return false
}

export const historyReducer: Reducer<HistoryState, HistoryReducerAction> = (
    state = initialState,
    action
) => {
    switch (action.type) {
        case "history/add":
            return action.payload && !isDuplicatedEntry(state, action)
                ? {
                      ...state,
                      previousSearchExpressions: [
                          action.payload,
                          ...state.previousSearchExpressions.slice(0, 4)
                      ]
                  }
                : state
        case "history/reset":
            return initialState
        default:
            return state
    }
}

export const selectHistory = (state: State) => state.history
